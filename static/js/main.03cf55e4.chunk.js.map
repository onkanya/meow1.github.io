{"version":3,"sources":["assets/picture.jpg","pages/index.jsx","styles/theme.js","App.js","serviceWorker.js","index.js","styles/Home.module.css"],"names":["module","exports","AvatarWrapper","styled","div","DescWrapper","p","theme","color","disable","ButtonWrapper","Button","a","primary","name","colorSet","info","line","warning","TextButton","span","Home","className","styles","container","main","src","myImg","alt","description","grid","href","target","secondary","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,qC,yvDCY3C,IAiBMC,EAAgBC,IAAOC,IAAV,KAObC,EAAcF,IAAOG,EAAV,KAIN,qBAAGC,MAAkBC,MAAMC,WAEhCC,EAAgBP,IAAOC,IAAV,KAWbO,EAASR,IAAOS,EAAV,KACI,qBAAGL,MAAkBC,MAAMK,WAkBP,qBAAGN,MAAkBC,MAAMC,WAQnD,gBApESK,EAAMN,EAoEZD,EAAH,EAAGA,MAAOQ,EAAV,EAAUA,SAAV,OApESD,EAoE4BC,EApEtBP,EAoEgCD,EAAMC,MAnElD,aAATM,EACKN,EAAMQ,KAGF,SAATF,EACKN,EAAMS,KAGF,WAATH,EACKN,EAAMC,QAGF,cAATK,EACKN,EAAMU,aADf,KAuEIC,EAAahB,IAAOiB,KAAV,KAwEDC,EA9DF,WACX,OACE,yBAAKC,UAAWC,IAAOC,WACrB,0BAAMF,UAAWC,IAAOE,MACtB,kBAACvB,EAAD,KACE,yBAAKwB,IAAKC,IAAOC,IAAI,MAGvB,uBAAGN,UAAWC,IAAOM,aAArB,iBACA,kBAACxB,EAAD,2BACA,kBAACA,EAAD,qBAEA,yBAAKiB,UAAWC,IAAOO,MACrB,kBAACpB,EAAD,KACE,kBAACC,EAAD,CACEoB,KAAK,2CACLC,OAAO,SACPjB,SAAS,YAET,kBAAC,IAAD,MACA,kBAACI,EAAD,mBAIJ,kBAACT,EAAD,KACE,kBAACC,EAAD,CACEoB,KAAK,kCACLC,OAAO,SACPjB,SAAS,QAET,kBAAC,IAAD,MACA,kBAACI,EAAD,eAIJ,kBAACT,EAAD,KACE,kBAACC,EAAD,CACEoB,KAAK,6BACLC,OAAO,SACPjB,SAAS,UAET,kBAAC,IAAD,MACA,kBAACI,EAAD,iBAIJ,kBAACT,EAAD,KACE,kBAACC,EAAD,CACEoB,KAAK,0CACLC,OAAO,SACPjB,SAAS,aAET,kBAAC,IAAD,MACA,kBAACI,EAAD,wBCpJCZ,EAXD,CACZC,MAAO,CACLK,QAAS,UACToB,UAAW,UACXf,QAAS,UACTF,KAAM,UACNP,QAAS,UACTQ,KAAM,YCOKiB,MARf,WACE,OACE,kBAAC,IAAD,CAAe3B,MAAOA,GACpB,kBAAC,EAAD,QCGc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BtD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,OAAS,qBAAqB,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,KAAO,mBAAmB,KAAO,mBAAmB,KAAO,sB","file":"static/js/main.03cf55e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/picture.cae04fac.jpg\";","import React from \"react\";\nimport styled from \"styled-components\";\n\n// style\nimport styles from \"../styles/Home.module.css\";\n\n// Icon\nimport { FaGithub, FaLine, FaFacebook, FaInstagram } from \"react-icons/fa\";\n\n// image\nimport myImg from \"../assets/picture.jpg\";\n\nconst handleColor = (name, color) => {\n  if (name === \"facebook\") {\n    return color.info;\n  }\n\n  if (name === \"line\") {\n    return color.line;\n  }\n\n  if (name === \"github\") {\n    return color.disable;\n  }\n\n  if (name === \"instagram\") {\n    return color.warning;\n  }\n};\nconst AvatarWrapper = styled.div`\n  img {\n    width: 100px;\n    border-radius: 30px;\n  }\n`;\n\nconst DescWrapper = styled.p`\n  font-size: 1rem;\n  font-weight: 500;\n  margin: 0;\n  color: ${({ theme }) => theme.color.disable};\n`;\nconst ButtonWrapper = styled.div`\n  margin: 0.6rem;\n  flex-basis: 45%;\n  padding: 1rem;\n  text-align: left;\n  color: inherit;\n  text-decoration: none;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Button = styled.a`\n  background: ${({ theme }) => theme.color.primary};\n  border: 0px solid #49d75c;\n  border-radius: 35px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  outline: none;\n  transition: all 0.25s ease;\n  width: 210px;\n  position: relative;\n  height: 60px;\n  overflow: hidden;\n\n  &:hover {\n    box-shadow: 0px 10px 25px 0px ${({ theme }) => theme.color.disable};\n\n    svg {\n      transform: translate(7px);\n    }\n  }\n\n  svg {\n    fill: ${({ theme, colorSet }) => handleColor(colorSet, theme.color)};\n    position: absolute;\n    left: 35px;\n    pointer-events: none;\n    z-index: 10;\n    /* background: inherit; */\n    width: 35px;\n    height: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    transition: all 0.25s ease;\n  }\n`;\n\nconst TextButton = styled.span`\n  width: 130px;\n  display: block;\n  position: relative;\n  pointer-events: none;\n  transition: all 0.25s ease;\n  position: absolute;\n  left: 85px;\n`;\n\nconst Home = () => {\n  return (\n    <div className={styles.container}>\n      <main className={styles.main}>\n        <AvatarWrapper>\n          <img src={myImg} alt=\"\" />\n        </AvatarWrapper>\n\n        <p className={styles.description}>@mean_onkanya</p>\n        <DescWrapper>Frontend developer</DescWrapper>\n        <DescWrapper>20scoops CNX</DescWrapper>\n\n        <div className={styles.grid}>\n          <ButtonWrapper>\n            <Button\n              href=\"https://www.facebook.com/mean.onkanya.75\"\n              target=\"_blank\"\n              colorSet=\"facebook\"\n            >\n              <FaFacebook />\n              <TextButton>Facebook</TextButton>\n            </Button>\n          </ButtonWrapper>\n\n          <ButtonWrapper>\n            <Button\n              href=\"https://line.me/ti/p/kz8tvBKclY\"\n              target=\"_blank\"\n              colorSet=\"line\"\n            >\n              <FaLine />\n              <TextButton>LINE</TextButton>\n            </Button>\n          </ButtonWrapper>\n\n          <ButtonWrapper>\n            <Button\n              href=\"https://github.com/onkanya\"\n              target=\"_blank\"\n              colorSet=\"github\"\n            >\n              <FaGithub />\n              <TextButton>Github</TextButton>\n            </Button>\n          </ButtonWrapper>\n\n          <ButtonWrapper>\n            <Button\n              href=\"https://www.instagram.com/mean_onkanya/\"\n              target=\"_blank\"\n              colorSet=\"instagram\"\n            >\n              <FaInstagram />\n              <TextButton>Instagram</TextButton>\n            </Button>\n          </ButtonWrapper>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n","const theme = {\n  color: {\n    primary: \"#1d3557\",\n    secondary: \"#F1FAEE\",\n    warning: \"#E63946\",\n    info: \"#A8DADC\",\n    disable: \"#CDCDCD\",\n    line: \"#49D75C\",\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport \"./styles/globals.css\";\nimport Home from \"./pages/index\";\nimport theme from \"./styles/theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Home />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__3JNw6\",\"main\":\"Home_main__2L4cf\",\"footer\":\"Home_footer__3eZco\",\"title\":\"Home_title__2jL4m\",\"description\":\"Home_description__1txge\",\"code\":\"Home_code__2jeOn\",\"grid\":\"Home_grid__2WglI\",\"card\":\"Home_card__2ucD6\",\"logo\":\"Home_logo__3etHn\"};"],"sourceRoot":""}